openapi: 3.0.1
info:
  title: Social Secrets
  description: "Social Secrets"
  version: 0.0.1
  contact:
    name: Mark Turner
    email: "mark.turner0@gmail.com"
servers:
  - url: http://localhost:8080
    description: Localhost
    variables:
      basePath:
        default: v1
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    GeneralError:
      type: object
      properties:
        message:
          type: string
    Credentials:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "rob5000"
        password:
          type: string
          example: "robsbirthday"
          #TODO - Remove if the friend token is sent as auth header bearer token
#        permissionToken:
#          type: string
#          description: "Base 64 encoded token string"
#          example: "MTpmcmllbmQ6MTYwMTQwODk2MjczODo="
    AuthTokens:
      type: object
      required:
        - permissionToken
      properties:
        permissionToken:
          type: string
          description: "Base 64 encoded token string"
          example: "MTpmcmllbmQ6MTYwMTQwODk2MjczODo="
        authToken:
          type: string
          description: "Base 64 encoded token string"
          example: "1|auth|1601106944853|IAmSigned"
    Secret:
      type: object
      required:
        - id
        - secretText
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          example: 1234
        ownerId:
          type: integer
          format: int64
          minimum: 0
          example: 1234
        secretText:
          type: string
          example: "My secret text"
    SecretCreate:
      type: object
      required:
        - secretText
      properties:
        secretText:
          type: string
          example: "My secret text"
    SharedSecret:
      type: object
      required:
        - userId
        - secretId
      properties:
        userId:
          type: integer
          format: int64
          minimum: 0
          example: 1234
        secretId:
          type: integer
          minimum: 0
          example: 1234
    ShareSecret:
      type: object
      required:
        - userId
      properties:
        userId:
          type: integer
          format: int64
          minimum: 0
          example: 1234
  parameters:
    userIdParam:
      name: userId
      in: path
      description: User Id in path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
    secretIdParam:
      name: secretId
      in: path
      description: Secret Id in path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
  responses:
    NotAuthorised:
      description: Not Authorised.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
    Forbidden:
      description: Forbidden.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
    NotFound:
      description: Resource Not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
    BadRequest:
      description: Bad Request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
security:
  - bearerAuth: [ ]
paths:
  /login:
    post:
      description: Get friend token and/or auth token. Auth token is only returned if friend token is supplied as the bearer token to the auth call
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: Auth Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        default:
          $ref: '#/components/responses/GeneralError'
  /user/{userId}/secrets:
    parameters:
      - $ref: '#/components/parameters/userIdParam'
    get:
      description: Returns all secrets owned by a user
      responses:
        '200':
          description: A list of secrets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Secret'
        '401':
          $ref: '#/components/responses/NotAuthorised'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/GeneralError'
    post:
      description: Create a Secret.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretCreate'
      responses:
        '200':
          description: New Secret.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
        '401':
          $ref: '#/components/responses/NotAuthorised'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/GeneralError'
  /user/{userId}/secrets/{secretId}:
    parameters:
      - $ref: '#/components/parameters/userIdParam'
      - $ref: '#/components/parameters/secretIdParam'
    get:
      description: Returns the specified owned secret
      responses:
        '200':
          description: A secrets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Secret'
        '401':
          $ref: '#/components/responses/NotAuthorised'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/GeneralError'
  /user/{userId}/sharedsecrets:
    parameters:
      - $ref: '#/components/parameters/userIdParam'
    get:
      description: Returns all secrets shared with this user
      responses:
        '200':
          description: A list of secrets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Secret'
        '401':
          $ref: '#/components/responses/NotAuthorised'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/GeneralError'
  /user/{userId}/sharedsecrets/{secretId}:
    parameters:
      - $ref: '#/components/parameters/userIdParam'
      - $ref: '#/components/parameters/secretIdParam'
    get:
      description: Returns a specfied secret if it is shared with this user.
      responses:
        '200':
          description: A list of secrets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Secret'
        '401':
          $ref: '#/components/responses/NotAuthorised'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/GeneralError'
    post:
      description: Share a secret with another user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareSecret'
      responses:
        '201':
          description: Successfully shared secret.
        '401':
          $ref: '#/components/responses/NotAuthorised'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/GeneralError'
